DROP TABLE IF EXISTS loans CASCADE;
DROP TABLE IF EXISTS book_copies CASCADE;
DROP TABLE IF EXISTS books CASCADE;
DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS libraries CASCADE;
DROP TYPE IF EXISTS user_role CASCADE;
DROP TYPE IF EXISTS book_type CASCADE;

-- Ensure pg_trgm extension exists for fuzzy search
-- Requires appropriate privileges; in docker-compose the default user is superuser
CREATE EXTENSION IF NOT EXISTS pg_trgm;

-- === Enums ===
DO $$ BEGIN
  CREATE TYPE user_role AS ENUM ('MEMBER', 'LIBRARIAN');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

DO $$ BEGIN
  CREATE TYPE book_type AS ENUM ('BOOK', 'PUBLICATION');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

-- === Core entities ===

CREATE TABLE IF NOT EXISTS libraries (
  id      INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name    TEXT NOT NULL,
  address TEXT
);

CREATE TABLE IF NOT EXISTS users (
  id            INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name          TEXT NOT NULL,
  email         TEXT NOT NULL,
  password_hash TEXT NOT NULL,
  role          user_role NOT NULL DEFAULT 'MEMBER',
  CONSTRAINT uq_users_email_lower UNIQUE (email)
);

CREATE UNIQUE INDEX IF NOT EXISTS uq_users_email_ci
  ON users (lower(email));

CREATE TABLE IF NOT EXISTS books (
  id       INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title    TEXT NOT NULL,
  author   TEXT NOT NULL,
  pub_year INT,
  type     book_type NOT NULL       -- 'BOOK' or 'PUBLICATION'
);

CREATE INDEX IF NOT EXISTS books_title_trgm_gin ON books USING GIN (title gin_trgm_ops);
CREATE INDEX IF NOT EXISTS books_author_trgm_gin ON books USING GIN (author gin_trgm_ops);
CREATE INDEX IF NOT EXISTS books_pub_year_btree ON books (pub_year);


CREATE TABLE IF NOT EXISTS book_copies (
  id             INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  book_id        INTEGER NOT NULL REFERENCES books(id)     ON DELETE RESTRICT,
  library_id     INTEGER NOT NULL REFERENCES libraries(id) ON DELETE RESTRICT,
  shelf_location TEXT,
  -- Denormalized pointer to the active loan (nullable)
  current_loan_id BIGINT
);

CREATE INDEX IF NOT EXISTS idx_book_copies_book_id ON book_copies (book_id);
CREATE INDEX IF NOT EXISTS idx_copies_avail_book_lib ON book_copies (book_id, library_id) WHERE current_loan_id IS NULL;


CREATE TABLE IF NOT EXISTS loans (
  id          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id     INTEGER NOT NULL REFERENCES users(id)       ON DELETE RESTRICT,
  copy_id     INTEGER NOT NULL REFERENCES book_copies(id) ON DELETE RESTRICT,
  loaned_at   TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  due_at      TIMESTAMPTZ NOT NULL,
  returned_at TIMESTAMPTZ,
  due_notice_sent_at TIMESTAMPTZ,
  CONSTRAINT due_after_loan CHECK (due_at > loaned_at),
  CONSTRAINT returned_after_loan CHECK (returned_at IS NULL OR returned_at >= loaned_at)
);

-- Enforce at most one active (unreturned) loan per copy
CREATE UNIQUE INDEX IF NOT EXISTS uq_loans_active_copy ON loans (copy_id) WHERE returned_at IS NULL;
CREATE INDEX IF NOT EXISTS idx_loans_user_returned_due ON loans (user_id, returned_at DESC, due_at ASC);
CREATE INDEX IF NOT EXISTS idx_loans_due_pending ON loans (due_at) WHERE returned_at IS NULL AND due_notice_sent_at IS NULL;
